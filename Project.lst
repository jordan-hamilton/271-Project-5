Microsoft (R) Macro Assembler Version 14.16.27027.1	    03/05/19 20:34:01
-Programming Assignment #5     (Program05.asm		     Page 1 - 1


				TITLE Programming Assignment #5     (Program05.asm)

				; Author: Jordan Hamilton
				; Last Modified: 3/4/2019
				; OSU email address: hamiltj2@oregonstate.edu
				; Course number/section: CS271-400
				; Project Number: 5                Due Date: 3/3/2019
				; Description: This program prompts the user to enter a number of integers in the range [10, 200], then generates that many
				; random integers between 100 and 999 to store in an array. The numbers are displayed to the user, then the list is sorted in
				; descending order and the median value. is calculated and displayed to the user. Finally, the user is shown the same list again
				; after sorting.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A			MIN                 EQU       10
 = 000000C8			MAX                 EQU       200
 = 00000064			LO                  EQU       100
 = 000003E7			HI                  EQU       999
 = 0000000A			NUMBERSPERLINE      EQU       10

 00000000			.data

 00000000 50 72 6F 67 72	intro               BYTE      "Programming assignment #5 by Jordan Hamilton",0
	   61 6D 6D 69 6E
	   67 20 61 73 73
	   69 67 6E 6D 65
	   6E 74 20 23 35
	   20 62 79 20 4A
	   6F 72 64 61 6E
	   20 48 61 6D 69
	   6C 74 6F 6E 00
 0000002D 54 68 69 73 20	instruction1        BYTE      "This program will display up to 200 random numbers after storing them in an array.",0
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 75 70 20 74
	   6F 20 32 30 30
	   20 72 61 6E 64
	   6F 6D 20 6E 75
	   6D 62 65 72 73
	   20 61 66 74 65
	   72 20 73 74 6F
	   72 69 6E 67 20
	   74 68 65 6D 20
	   69 6E 20 61 6E
	   20 61 72 72 61
	   79 2E 00
 00000080 57 65 27 6C 6C	instruction2        BYTE      "We'll then calculate and display the median, then show you the numbers again in descending order.",0
	   20 74 68 65 6E
	   20 63 61 6C 63
	   75 6C 61 74 65
	   20 61 6E 64 20
	   64 69 73 70 6C
	   61 79 20 74 68
	   65 20 6D 65 64
	   69 61 6E 2C 20
	   74 68 65 6E 20
	   73 68 6F 77 20
	   79 6F 75 20 74
	   68 65 20 6E 75
	   6D 62 65 72 73
	   20 61 67 61 69
	   6E 20 69 6E 20
	   64 65 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 2E 00
 000000E2 50 6C 65 61 73	promptForNumber     BYTE      "Please enter a positive integer between 10 and 200, inclusive: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   70 6F 73 69 74
	   69 76 65 20 69
	   6E 74 65 67 65
	   72 20 62 65 74
	   77 65 65 6E 20
	   31 30 20 61 6E
	   64 20 32 30 30
	   2C 20 69 6E 63
	   6C 75 73 69 76
	   65 3A 20 00
 00000122 45 72 72 6F 72	retryMsg            BYTE      "Error: This number is out of range.",0
	   3A 20 54 68 69
	   73 20 6E 75 6D
	   62 65 72 20 69
	   73 20 6F 75 74
	   20 6F 66 20 72
	   61 6E 67 65 2E
	   00
 00000146 48 65 72 65 27	titleUnsorted       BYTE      "Here's the list before sorting:",0
	   73 20 74 68 65
	   20 6C 69 73 74
	   20 62 65 66 6F
	   72 65 20 73 6F
	   72 74 69 6E 67
	   3A 00
 00000166 48 65 72 65 27	titleSorted         BYTE      "Here's the list after sorting:",0
	   73 20 74 68 65
	   20 6C 69 73 74
	   20 61 66 74 65
	   72 20 73 6F 72
	   74 69 6E 67 3A
	   00
 00000185 4D 65 64 69 61	medianMsg           BYTE      "Median value: ",0
	   6E 20 76 61 6C
	   75 65 3A 20 00

 00000194 20 20 20 00		outputSpacing       BYTE      "   ",0
 00000198 00000000		numbersPrinted      DWORD     0

 0000019C 00000000		request             DWORD     ?
 000001A0  000000C8 [		array               DWORD      MAX DUP (?)
	    00000000
	   ]


 00000000			.code

 00000000			main PROC

				     ; Seed the random number generalor
 00000000  E8 00000000 E	     call      Randomize

 00000005  68 00000080 R	     push      OFFSET instruction2
 0000000A  68 0000002D R	     push      OFFSET instruction1
 0000000F  68 00000000 R	     push      OFFSET intro 
 00000014  E8 00000084		     call      introduction

 00000019  68 0000019C R	     push      OFFSET request
 0000001E  68 00000122 R	     push      OFFSET retryMsg
 00000023  68 000000E2 R	     push      OFFSET promptForNumber
 00000028  E8 0000009E		     call      getData

 0000002D  68 000001A0 R	     push      OFFSET array
 00000032  FF 35 0000019C R	     push      request
 00000038  E8 000000C4		     call      fillArray

 0000003D  68 000001A0 R	     push      OFFSET array
 00000042  FF 35 0000019C R	     push      request
 00000048  68 00000194 R	     push      OFFSET outputSpacing
 0000004D  68 00000146 R	     push      OFFSET titleUnsorted
 00000052  E8 0000015C		     call      displayList

 00000057  68 000001A0 R	     push      OFFSET array
 0000005C  FF 35 0000019C R	     push      request
 00000062  E8 000000BC		     call      sortList

 00000067  68 00000185 R	     push      OFFSET medianMsg
 0000006C  68 000001A0 R	     push      OFFSET array
 00000071  FF 35 0000019C R	     push      request
 00000077  E8 000000F2		     call      displayMedian

 0000007C  68 000001A0 R	     push      OFFSET array
 00000081  FF 35 0000019C R	     push      request
 00000087  68 00000194 R	     push      OFFSET outputSpacing
 0000008C  68 00000166 R	     push      OFFSET titleSorted
 00000091  E8 0000011D		     call      displayList
				     
				     ; Exit to the operating system
					invoke    ExitProcess,0
 00000096  6A 00	   *	    push   +000000000h
 00000098  E8 00000000 E   *	    call   ExitProcess

 0000009D			main ENDP


				; Procedure to introduce the user to the expected output of the program
				; Preconditions: None
				; Registers changed: edx
 0000009D			introduction PROC
				     
 0000009D  55			     push      ebp
 0000009E  8B EC		     mov       ebp, esp

				     ; Introduce the program (and programmer)
 000000A0  8B 55 08		     mov       edx, [ebp+8] 
 000000A3  E8 00000000 E	     call      WriteString
 000000A8  E8 00000000 E	     call      Crlf

				     ; Give the user instructions on how to begin displaying array contents
 000000AD  8B 55 0C		     mov       edx, [ebp+12]
 000000B0  E8 00000000 E	     call      WriteString
 000000B5  E8 00000000 E	     call      Crlf
 000000BA  8B 55 10		     mov       edx, [ebp+16]
 000000BD  E8 00000000 E	     call      WriteString
 000000C2  E8 00000000 E	     call      Crlf

 000000C7  5D			     pop       ebp
 000000C8  C2 000C		     ret       12

 000000CB			introduction ENDP


				; Procedure to get and validate a number of random integers to generate from user input
				; Preconditions: None
				; Registers changed: eax, ebx, edx 
 000000CB			getData PROC

 000000CB  55			     push      ebp
 000000CC  8B EC		     mov       ebp, esp

				     ; Store the address of result in the ebx register
 000000CE  8B 5D 10		     mov       ebx, [ebp+16]

				     ; Ask the user for a number in the valid range, then read input from the keyboard
				     ; Call the validate procedure to verify that the number was in the requested range
 000000D1			     readInput:
 000000D1  8B 55 08		          mov       edx, [ebp+8]
 000000D4  E8 00000000 E	          call      WriteString
 000000D9  E8 00000000 E	          call      ReadInt

				     ; Compare the entered number with the bounds of the range, jumping to the invalidInput label for values outside the range
				     ; Otherwise, jump to the goodInput to continue the program
 000000DE  83 F8 0A		     cmp       eax, MIN
 000000E1  7C 09		     jl        invalidInput
 000000E3  3D 000000C8		     cmp       eax, MAX
 000000E8  7F 02		     jg        invalidInput
 000000EA  EB 0F		     jmp       goodInput   

				     ; Display an error message, then go back to prompting for input if the entered value was too large or too small
 000000EC			     invalidInput:
 000000EC  8B 55 0C		          mov       edx, [ebp+12]
 000000EF  E8 00000000 E	          call      WriteString
 000000F4  E8 00000000 E	          call      Crlf
 000000F9  EB D6		          jmp       readInput
				     
				     ; Store the entered integer in result once we've confirmed it's in range
 000000FB			     goodInput:
 000000FB  89 03		          mov       [ebx], eax

 000000FD  5D			     pop       ebp
 000000FE  C2 000C		     ret       12

 00000101			getData ENDP


				; Procedure to generate random numbers within the set range, then enter these sequentially into the array.
				; Preconditions: request variable is specified in the getData procdeure
				; Registers changed: eax, ecx
 00000101			fillArray PROC

 00000101  55			     push      ebp
 00000102  8B EC		     mov       ebp, esp

 00000104  8B 75 0C		     mov       esi, [ebp+12]
 00000107  8B 4D 08		     mov       ecx, [ebp+8]
				     
 0000010A			     fill:    
				          ; Set up the range of random numbers to generate by moving the difference between the high and low numbers into eax and then incrementing
				          ; eax by 1, since RandomRange uses one less than the number in eax as the upper limit.
 0000010A  B8 00000383		          mov       eax, HI-LO
 0000010F  40			          inc       eax
 00000110  E8 00000000 E	          call      RandomRange

				          ; Add our lower limit back to eax to ensure the number that was generated is back in the acceptable range, instead of starting at 0
 00000115  83 C0 64		          add       eax, LO
				          
				          ; Save the random number in the address at esi, then move to the address of the next element in the array and loop so we're only
				          ; filling the array with the requested number of integers
 00000118  89 06		          mov       [esi], eax
 0000011A  83 C6 04		          add       esi, 4
 0000011D  E2 EB		          loop      fill

 0000011F  5D			     pop       ebp
 00000120  C2 0008		     ret       8

 00000123			fillArray ENDP


				; Procedure to loop through the array and sort its elements in descending order
				; Preconditions: Array has been populated with the a number of values equal to the request variable, during the fillArray procedure
				; Registers changed: ebx, ecx, edx
 00000123			sortList PROC

 00000123  55			     push      ebp
 00000124  8B EC		     mov       ebp, esp

				     ; Configure the loop counter for the outer loop of sorting by storing one less than the result in ecx,
				     ; then store the address of our array in esi
 00000126  8B 4D 08		     mov       ecx, [ebp+8]
 00000129  49			     dec       ecx
 0000012A  8B 75 0C		     mov       esi, [ebp+12]

 0000012D			     loop1:
				          ; Store the address of esi and our loop counter before we begin our second loop
 0000012D  51			          push      ecx
 0000012E  56			          push      esi

 0000012F			     loop2:
				          ; Dereference the current array element and the following element, then compare the two values
				          ; to determine if the need to be exchanged
 0000012F  8B 1E		          mov       ebx, [esi]
 00000131  8B 56 04		          mov       edx, [esi+4]
 00000134  3B DA		          cmp       ebx, edx
 00000136  73 0C		          jae       endExchange
				     
				          ; If the smaller value is the first element we're comparing, push the current element's address and the following
				          ; elements address so the reference parameters can be used in our exchange procedure
 00000138			          beginExchange:
 00000138  8B DE		               mov       ebx, esi
 0000013A  53			               push      ebx
 0000013B  83 C3 04		               add       ebx, 4
 0000013E  53			               push      ebx
 0000013F  E8 0000000D		               call      exchange

				          ; After we've determined whether or not to swap values in the array, set esi to the next value in the array and repeat the
				          ; second loop if needed.
 00000144			          endExchange:
 00000144  83 C6 04		               add       esi, 4

 00000147  E2 E6		          loop      loop2

				          ; Now that our second loop has ended, we need to set esi back to the address we stored in eax, then pop ecx
				          ; This allows us to do another pass through the array to compare values
 00000149  5E			          pop       esi
 0000014A  59			          pop       ecx
				     
 0000014B  E2 E0		          loop      loop1

 0000014D  5D			     pop       ebp
 0000014E  C2 0008		     ret       8

 00000151			sortList ENDP


				; Procedure to swap two elements in the array
				; Preconditions: Addresses to two sequential array elements must be on the stack 
				; Registers changed: eax, ebx, ecx, edx
 00000151			exchange PROC

 00000151  55			     push      ebp
 00000152  8B EC		     mov       ebp, esp
				     
				     ; Save ecx before altering it
 00000154  51			     push      ecx

				     ; Store the address of the array in edi
 00000155  8B 7D 0C		     mov       edi, [ebp+12]
				     
				     ; Store addresses to the first and second elements
 00000158  8B 45 0C		     mov       eax, [ebp+12]
 0000015B  8B 5D 08		     mov       ebx, [ebp+8]
				     
				     ; Dereference both elements
 0000015E  8B 08		     mov       ecx, [eax]
 00000160  8B 13		     mov       edx, [ebx]

				     ; Save the value in the second element into the address of the first element and vice versa
 00000162  89 17		     mov       [edi], edx
 00000164  83 C7 04		     add       edi, 4
 00000167  89 0F		     mov       [edi], ecx

				     ; Restore our loop counter to its original value
 00000169  59			     pop       ecx

 0000016A  5D			     pop       ebp
 0000016B  C2 0008		     ret       8

 0000016E			exchange ENDP


				; Procedure to calculate and display the median value 
				; Preconditions: Array must have been sorted via the sortList procedure
				; Registers changed: eax, ebx, ecx edx
 0000016E			displayMedian PROC
 0000016E  55			     push      ebp
 0000016F  8B EC		     mov       ebp, esp

 00000171  8B 75 0C		     mov       esi, [ebp+12]
				     
				     ; Set up 32-bit division to determine if there is an odd or even number of values in the array
 00000174  8B 45 08		     mov       eax, [ebp+8]
 00000177  BB 00000002		     mov       ebx, 2
 0000017C  BA 00000000		     mov       edx, 0
 00000181  F7 F3		     div       ebx
				     
				     ; If our remainder when dividing by 2 was not 0, then we had an odd number of values in the array
				     ; We can then look at the exact median
 00000183  83 FA 00		     cmp       edx, 0
 00000186  75 12		     jne       oddArray

				     ; We'll divide again if our remainder was 0. We set up division by adding the array values at our quotient and one less than
				     ; our quotient (shifting because our first element starts at esi), then dividing that number by 2 to get the rounded median.
 00000188  BA 00000000		     mov       edx, 0
 0000018D  8B C8		     mov       ecx, eax
 0000018F  49			     dec       ecx

 00000190  8B 04 86		     mov       eax, [esi+4*eax]
 00000193  03 04 8E		     add       eax, [esi+4*ecx]
 00000196  F7 F3		     div       ebx
				     
 00000198  EB 03		     jmp       printMedian

 0000019A			     oddArray:
				          ; Dereference the array element at our quotient
 0000019A  8B 04 86		          mov       eax, [esi+4*eax]

				     ; Display our message and the median value we determined and stored in eax
 0000019D			     printMedian:
 0000019D  8B 55 10		          mov       edx, [ebp+16]
 000001A0  E8 00000000 E	          call      WriteString
 000001A5  E8 00000000 E	          call      WriteDec
 000001AA  E8 00000000 E	          call      Crlf       

 000001AF  5D			     pop       ebp
 000001B0  C2 000C		     ret       12

 000001B3			displayMedian ENDP


				; Procedure to list all values in the array
				; Preconditions: Array must have been filled with elements during the fillArray procedure
				; Registers changed: eax, ebx, ecx edx
 000001B3			displayList PROC

 000001B3  55			     push      ebp
 000001B4  8B EC		     mov       ebp, esp

				     ; Store the offset of the array
 000001B6  8B 75 14		     mov       esi, [ebp+20]

				     ; Set ebx to 0 initially so we can track how many numbers we've printed on a line
 000001B9  BB 00000000		     mov       ebx, 0

				     ; Store the requested number of integers in ecx so we can loop through the array the appropriate number of times
 000001BE  8B 4D 10		     mov       ecx, [ebp+16]

				     ; Display the title
 000001C1  8B 55 08		     mov       edx, [ebp+8]
 000001C4  E8 00000000 E	     call      WriteString
 000001C9  E8 00000000 E	     call      Crlf

				     ; If we've printed 10 numbers on a line, print a newline. If we've printed at least 1 but less than 10, print some spacing 
				     ;before printing a number. Otherwise, we'll just print the number without additional formatting first
 000001CE			     printArray:
 000001CE  83 FB 0A		          cmp       ebx, NUMBERSPERLINE
 000001D1  74 07		          je        newLine
 000001D3  83 FB 00		          cmp       ebx, 0
 000001D6  75 0E		          jne       spacing
 000001D8  EB 14		          jmp       printNumber

				          ; Print the new line without additional spacing, then reset the line counter in ebx.
				          ; We do this by skipping over the spacing label so we don't print the additional spacing
				          ; after moving to a new line
 000001DA			          newLine:
 000001DA  E8 00000000 E	               call      Crlf
 000001DF  BB 00000000		               mov       ebx, 0
 000001E4  EB 08		               jmp       printNumber

				          ; Display some spacing if we've printed more than one number, but fewer than 10 on this line
 000001E6			          spacing:
 000001E6  8B 55 0C		               mov       edx, [ebp+12]
 000001E9  E8 00000000 E	               call      WriteString

				          ; Increment the number of integers we've printed on one line, then display the decimal value of the
				          ; integer at the array index being referenced in esi. Increment esi by 4 so we can loop to display the next element
 000001EE			          printNumber:
 000001EE  43			               inc       ebx
 000001EF  8B 06		               mov       eax, [esi]
 000001F1  E8 00000000 E	               call      WriteDec
 000001F6  83 C6 04		               add       esi, 4
				          
 000001F9  E2 D3		          loop printArray

				     ; Ensure we've moved to a new line after completely printing the array
 000001FB  E8 00000000 E	     call      Crlf

 00000200  5D			     pop       ebp
 00000201  C2 0010		     ret       16

 00000204			displayList ENDP


				END main
Microsoft (R) Macro Assembler Version 14.16.27027.1	    03/05/19 20:34:01
-Programming Assignment #5     (Program05.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004C0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000204 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 000001B3 _TEXT	Length= 00000051 Public STDCALL
  printArray . . . . . . . . . .	L Near	 000001CE _TEXT	
  newLine  . . . . . . . . . . .	L Near	 000001DA _TEXT	
  spacing  . . . . . . . . . . .	L Near	 000001E6 _TEXT	
  printNumber  . . . . . . . . .	L Near	 000001EE _TEXT	
displayMedian  . . . . . . . . .	P Near	 0000016E _TEXT	Length= 00000045 Public STDCALL
  oddArray . . . . . . . . . . .	L Near	 0000019A _TEXT	
  printMedian  . . . . . . . . .	L Near	 0000019D _TEXT	
exchange . . . . . . . . . . . .	P Near	 00000151 _TEXT	Length= 0000001D Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 00000101 _TEXT	Length= 00000022 Public STDCALL
  fill . . . . . . . . . . . . .	L Near	 0000010A _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000CB _TEXT	Length= 00000036 Public STDCALL
  readInput  . . . . . . . . . .	L Near	 000000D1 _TEXT	
  invalidInput . . . . . . . . .	L Near	 000000EC _TEXT	
  goodInput  . . . . . . . . . .	L Near	 000000FB _TEXT	
introduction . . . . . . . . . .	P Near	 0000009D _TEXT	Length= 0000002E Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000009D Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000123 _TEXT	Length= 0000002E Public STDCALL
  loop1  . . . . . . . . . . . .	L Near	 0000012D _TEXT	
  loop2  . . . . . . . . . . . .	L Near	 0000012F _TEXT	
  beginExchange  . . . . . . . .	L Near	 00000138 _TEXT	
  endExchange  . . . . . . . . .	L Near	 00000144 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMBERSPERLINE . . . . . . . . .	Number	 0000000Ah   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 000001A0 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruction1 . . . . . . . . . .	Byte	 0000002D _DATA	
instruction2 . . . . . . . . . .	Byte	 00000080 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianMsg  . . . . . . . . . . .	Byte	 00000185 _DATA	
numbersPrinted . . . . . . . . .	DWord	 00000198 _DATA	
outputSpacing  . . . . . . . . .	Byte	 00000194 _DATA	
promptForNumber  . . . . . . . .	Byte	 000000E2 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
request  . . . . . . . . . . . .	DWord	 0000019C _DATA	
retryMsg . . . . . . . . . . . .	Byte	 00000122 _DATA	
titleSorted  . . . . . . . . . .	Byte	 00000166 _DATA	
titleUnsorted  . . . . . . . . .	Byte	 00000146 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
